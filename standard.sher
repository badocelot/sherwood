;; Standard Functions for Sherwood

;; NOTE: Most of this is adapted from the Wikipedia page on Lambda calculus

;; Give `:=` more friendly names
(:= define :=)
(:= def :=)

;; Identity function
(define . (\x x))
(define identity .)

;; Compose function
(define comp \f \g
  (\x f (g x)))

;; The mighty Y-combinator
(define Y \f
  (\x (f (\y ((x x) y))))
  (\x (f (\y ((x x) y)))))

;; Thread function
(define -> (Y (\cont \nargs \val
  ;; No more functions
  if (zero? nargs)
     val
     \f (cont (dec nargs) (f val)))))

;; Church booleans
(define true \x \y x)
(define false \x \y y)

(define and \p \q
  (p q p))
(define or \p \q
  (p p q))
(define not \p
  (p false true))

;; Define `if` for familiarity -- it's actually an identity function (see below)!
(define if \predicate \tval \fval
  (predicate tval fval))

;; Equivilantly:
;; (define if \predicate
;;   predicate)
;;
;; (define if \p \tval \fval
;;   (or (and p tval) fval))

;; Church predicates
(define zero? \n
  (n (\x false) true))

(define <= \m \n
  (zero? (- m n)))

;; Pairs
;;
;; NOTE: Eventually pairs and lists will be optimized and treated as primitives,
;;       but without losing their properties as functions.
(define cons \fst \snd
  (\op op fst snd))

(define first \pair
  (pair true))

(define rest \pair
  (pair false))

(define nil \x
  true)

(define nil? \p
  (\x\y false))

(define empty? nil?)

;; Some Church numerals stuff
;;
;; NOTE: Eventually Sherwood will handle numbers as primitives without giving up
;;       the Church numeral properties
(define 0 \f \x x)
(define 1 \f \x (f x))
(define 2 \f \x
  (f (f x)))

(define inc \n \f \x
  (f ((n f) x)))

;; Broken -- not sure why
(define dec \n \f \x
  n (\g \h h (g f)) (\u x) (\u u))

(define + \m \n
  (m inc n))

(define - \m \n
  (m dec n))

(define * \m \n
  (\f
    (m (n f))))

(define expt \b \e
  e b)
